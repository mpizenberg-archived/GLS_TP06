/*
* generated by Xtext
*/

package fr.enseeiht.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PETRI1GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PetriNetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PetriNet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPetrinetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPetriNetElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPetriNetElementsPetriNetElementParserRuleCall_3_0 = (RuleCall)cPetriNetElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PetriNet:
		//	"petrinet" name=ID "{" petriNetElements+=PetriNetElement* "}";
		public ParserRule getRule() { return rule; }

		//"petrinet" name=ID "{" petriNetElements+=PetriNetElement* "}"
		public Group getGroup() { return cGroup; }

		//"petrinet"
		public Keyword getPetrinetKeyword_0() { return cPetrinetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//petriNetElements+=PetriNetElement*
		public Assignment getPetriNetElementsAssignment_3() { return cPetriNetElementsAssignment_3; }

		//PetriNetElement
		public RuleCall getPetriNetElementsPetriNetElementParserRuleCall_3_0() { return cPetriNetElementsPetriNetElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PetriNetElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PetriNetElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArcParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PetriNetElement:
		//	Node | Arc;
		public ParserRule getRule() { return rule; }

		//Node | Arc
		public Alternatives getAlternatives() { return cAlternatives; }

		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }

		//Arc
		public RuleCall getArcParserRuleCall_1() { return cArcParserRuleCall_1; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTransitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Node:
		//	Place | Transition;
		public ParserRule getRule() { return rule; }

		//Place | Transition
		public Alternatives getAlternatives() { return cAlternatives; }

		//Place
		public RuleCall getPlaceParserRuleCall_0() { return cPlaceParserRuleCall_0; }

		//Transition
		public RuleCall getTransitionParserRuleCall_1() { return cTransitionParserRuleCall_1; }
	}

	public class PlaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Place");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMarkingAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMarkingINTTerminalRuleCall_2_1_0 = (RuleCall)cMarkingAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Place:
		//	"place" name=ID ("(" marking=INT ")")?;
		public ParserRule getRule() { return rule; }

		//"place" name=ID ("(" marking=INT ")")?
		public Group getGroup() { return cGroup; }

		//"place"
		public Keyword getPlaceKeyword_0() { return cPlaceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" marking=INT ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//marking=INT
		public Assignment getMarkingAssignment_2_1() { return cMarkingAssignment_2_1; }

		//INT
		public RuleCall getMarkingINTTerminalRuleCall_2_1_0() { return cMarkingINTTerminalRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Transition:
		//	"transition" name=ID;
		public ParserRule getRule() { return rule; }

		//"transition" name=ID
		public Group getGroup() { return cGroup; }

		//"transition"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ArcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMultiplicityAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMultiplicityINTTerminalRuleCall_1_1_0 = (RuleCall)cMultiplicityAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cReadOnlyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cReadOnlyRKeyword_2_0 = (Keyword)cReadOnlyAssignment_2.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPredecessorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cPredecessorNodeCrossReference_4_0 = (CrossReference)cPredecessorAssignment_4.eContents().get(0);
		private final RuleCall cPredecessorNodeIDTerminalRuleCall_4_0_1 = (RuleCall)cPredecessorNodeCrossReference_4_0.eContents().get(1);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSuccessorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSuccessorNodeCrossReference_6_0 = (CrossReference)cSuccessorAssignment_6.eContents().get(0);
		private final RuleCall cSuccessorNodeIDTerminalRuleCall_6_0_1 = (RuleCall)cSuccessorNodeCrossReference_6_0.eContents().get(1);
		
		//Arc:
		//	"arc" ("(" multiplicity=INT ")")? readOnly?="r"? "from" predecessor=[Node] "to" successor=[Node];
		public ParserRule getRule() { return rule; }

		//"arc" ("(" multiplicity=INT ")")? readOnly?="r"? "from" predecessor=[Node] "to" successor=[Node]
		public Group getGroup() { return cGroup; }

		//"arc"
		public Keyword getArcKeyword_0() { return cArcKeyword_0; }

		//("(" multiplicity=INT ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//multiplicity=INT
		public Assignment getMultiplicityAssignment_1_1() { return cMultiplicityAssignment_1_1; }

		//INT
		public RuleCall getMultiplicityINTTerminalRuleCall_1_1_0() { return cMultiplicityINTTerminalRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//readOnly?="r"?
		public Assignment getReadOnlyAssignment_2() { return cReadOnlyAssignment_2; }

		//"r"
		public Keyword getReadOnlyRKeyword_2_0() { return cReadOnlyRKeyword_2_0; }

		//"from"
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }

		//predecessor=[Node]
		public Assignment getPredecessorAssignment_4() { return cPredecessorAssignment_4; }

		//[Node]
		public CrossReference getPredecessorNodeCrossReference_4_0() { return cPredecessorNodeCrossReference_4_0; }

		//ID
		public RuleCall getPredecessorNodeIDTerminalRuleCall_4_0_1() { return cPredecessorNodeIDTerminalRuleCall_4_0_1; }

		//"to"
		public Keyword getToKeyword_5() { return cToKeyword_5; }

		//successor=[Node]
		public Assignment getSuccessorAssignment_6() { return cSuccessorAssignment_6; }

		//[Node]
		public CrossReference getSuccessorNodeCrossReference_6_0() { return cSuccessorNodeCrossReference_6_0; }

		//ID
		public RuleCall getSuccessorNodeIDTerminalRuleCall_6_0_1() { return cSuccessorNodeIDTerminalRuleCall_6_0_1; }
	}
	
	
	private PetriNetElements pPetriNet;
	private PetriNetElementElements pPetriNetElement;
	private NodeElements pNode;
	private PlaceElements pPlace;
	private TransitionElements pTransition;
	private ArcElements pArc;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PETRI1GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PetriNet:
	//	"petrinet" name=ID "{" petriNetElements+=PetriNetElement* "}";
	public PetriNetElements getPetriNetAccess() {
		return (pPetriNet != null) ? pPetriNet : (pPetriNet = new PetriNetElements());
	}
	
	public ParserRule getPetriNetRule() {
		return getPetriNetAccess().getRule();
	}

	//PetriNetElement:
	//	Node | Arc;
	public PetriNetElementElements getPetriNetElementAccess() {
		return (pPetriNetElement != null) ? pPetriNetElement : (pPetriNetElement = new PetriNetElementElements());
	}
	
	public ParserRule getPetriNetElementRule() {
		return getPetriNetElementAccess().getRule();
	}

	//Node:
	//	Place | Transition;
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//Place:
	//	"place" name=ID ("(" marking=INT ")")?;
	public PlaceElements getPlaceAccess() {
		return (pPlace != null) ? pPlace : (pPlace = new PlaceElements());
	}
	
	public ParserRule getPlaceRule() {
		return getPlaceAccess().getRule();
	}

	//Transition:
	//	"transition" name=ID;
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//Arc:
	//	"arc" ("(" multiplicity=INT ")")? readOnly?="r"? "from" predecessor=[Node] "to" successor=[Node];
	public ArcElements getArcAccess() {
		return (pArc != null) ? pArc : (pArc = new ArcElements());
	}
	
	public ParserRule getArcRule() {
		return getArcAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
