/*
* generated by Xtext
*/
package fr.enseeiht.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.enseeiht.services.PETRI1GrammarAccess;

public class PETRI1Parser extends AbstractContentAssistParser {
	
	@Inject
	private PETRI1GrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.enseeiht.ui.contentassist.antlr.internal.InternalPETRI1Parser createParser() {
		fr.enseeiht.ui.contentassist.antlr.internal.InternalPETRI1Parser result = new fr.enseeiht.ui.contentassist.antlr.internal.InternalPETRI1Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPetriNetElementAccess().getAlternatives(), "rule__PetriNetElement__Alternatives");
					put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
					put(grammarAccess.getPetriNetAccess().getGroup(), "rule__PetriNet__Group__0");
					put(grammarAccess.getPlaceAccess().getGroup(), "rule__Place__Group__0");
					put(grammarAccess.getPlaceAccess().getGroup_2(), "rule__Place__Group_2__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getArcAccess().getGroup(), "rule__Arc__Group__0");
					put(grammarAccess.getArcAccess().getGroup_1(), "rule__Arc__Group_1__0");
					put(grammarAccess.getPetriNetAccess().getNameAssignment_1(), "rule__PetriNet__NameAssignment_1");
					put(grammarAccess.getPetriNetAccess().getPetriNetElementsAssignment_3(), "rule__PetriNet__PetriNetElementsAssignment_3");
					put(grammarAccess.getPlaceAccess().getNameAssignment_1(), "rule__Place__NameAssignment_1");
					put(grammarAccess.getPlaceAccess().getMarkingAssignment_2_1(), "rule__Place__MarkingAssignment_2_1");
					put(grammarAccess.getTransitionAccess().getNameAssignment_1(), "rule__Transition__NameAssignment_1");
					put(grammarAccess.getArcAccess().getMultiplicityAssignment_1_1(), "rule__Arc__MultiplicityAssignment_1_1");
					put(grammarAccess.getArcAccess().getReadOnlyAssignment_2(), "rule__Arc__ReadOnlyAssignment_2");
					put(grammarAccess.getArcAccess().getPredecessorAssignment_4(), "rule__Arc__PredecessorAssignment_4");
					put(grammarAccess.getArcAccess().getSuccessorAssignment_6(), "rule__Arc__SuccessorAssignment_6");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.enseeiht.ui.contentassist.antlr.internal.InternalPETRI1Parser typedParser = (fr.enseeiht.ui.contentassist.antlr.internal.InternalPETRI1Parser) parser;
			typedParser.entryRulePetriNet();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public PETRI1GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PETRI1GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
